Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.4.196 Build 20170411

Compiler options: -std=c99 -Wall -Ofast -xHost -qopenmp -qopt-report=5 -lm -o d2q9-bgk

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: true
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1/11=9.1%] d2q9-bgk.c(124,34)
  -> INLINE: (139,5) usage(const char *) (isz = 6) (sz = 10)
    -> EXTERN: (766,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (767,3) exit(int)
  -> EXTERN: (147,3) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> (150,3) initialise(const char *, const char *, t_param *, float ***, float ***, int **, float **) (isz = 753) (sz = 772)
     [[ Inlining would exceed -inline-max-size value (772>253) <1>]]
  -> EXTERN: (154,3) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> INLINE (MANUAL): (159,5) accelerate_flow(const t_param, float *__restrict__ *__restrict__, const int *) (isz = 150) (sz = 159)
  -> (160,19) timestep(const t_param, float *__restrict__ *__restrict__, float **, const int *) (isz = 923) (sz = 936)
     [[ Inlining would exceed -inline-max-size value (936>253) <1>]]
  -> EXTERN: (172,3) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> EXTERN: (179,3) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> EXTERN: (184,3) printf(const char *__restrict__, ...)
  -> EXTERN: (185,3) printf(const char *__restrict__, ...)
  -> INLINE: (186,10) calc_reynolds(const t_param, float **, int *) (isz = 177) (sz = 188)
    -> INLINE: (668,10) av_velocity(const t_param, float **, int *) (isz = 167) (sz = 178)
  -> EXTERN: (187,3) printf(const char *__restrict__, ...)
  -> EXTERN: (188,3) printf(const char *__restrict__, ...)
  -> EXTERN: (189,3) printf(const char *__restrict__, ...)
  -> EXTERN: (190,3) printf(const char *__restrict__, ...)
  -> (191,3) write_values(const t_param, float **, int *, float *) (isz = 277) (sz = 290)
     [[ Inlining would exceed -inline-max-size value (290>253) <1>]]
  -> INLINE: (192,3) finalise(const t_param *, float ***, float ***, int **, float **) (isz = 62) (sz = 77)
    -> EXTERN: (643,5) _mm_free(void *)
    -> EXTERN: (646,3) free(void *)
    -> EXTERN: (650,5) _mm_free(void *)
    -> EXTERN: (653,3) free(void *)
    -> EXTERN: (656,3) free(void *)
    -> EXTERN: (659,3) free(void *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(158,3)
   remark #15382: vectorization support: call to function timestep(const t_param, float *__restrict__ *__restrict__, float **, const int *) cannot be vectorized   [ d2q9-bgk.c(160,19) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between params (159:5) and params.nx (405:3)
   remark #15346: vector dependence: assumed ANTI dependence between params.nx (405:3) and params (159:5)

   LOOP BEGIN at d2q9-bgk.c(405,3) inlined into d2q9-bgk.c(159,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between cells[1*2][ii+jj*params.nx] (413:7) and cells[7*2][ii+jj*params.nx] (419:7)
      remark #15346: vector dependence: assumed OUTPUT dependence between cells[7*2][ii+jj*params.nx] (419:7) and cells[1*2][ii+jj*params.nx] (413:7)
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(432,3) inlined into d2q9-bgk.c(186,10)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(433,5) inlined into d2q9-bgk.c(186,10)
      remark #15389: vectorization support: reference *(*(cells+(kk-1)*8)+(jj*params.nx+ii-params.nx-1)*4) has unaligned access   [ d2q9-bgk.c(440,28) ]
      remark #15389: vectorization support: reference *(*(cells+8)+(jj*params.nx+ii-params.nx-1)*4) has unaligned access   [ d2q9-bgk.c(445,14) ]
      remark #15389: vectorization support: reference *(*(cells+40)+(jj*params.nx+ii-params.nx-1)*4) has unaligned access   [ d2q9-bgk.c(445,46) ]
      remark #15389: vectorization support: reference *(*(cells+64)+(jj*params.nx+ii-params.nx-1)*4) has unaligned access   [ d2q9-bgk.c(446,14) ]
      remark #15389: vectorization support: reference *(*(cells+24)+(jj*params.nx+ii-params.nx-1)*4) has unaligned access   [ d2q9-bgk.c(447,15) ]
      remark #15389: vectorization support: reference *(*(cells+48)+(jj*params.nx+ii-params.nx-1)*4) has unaligned access   [ d2q9-bgk.c(447,47) ]
      remark #15389: vectorization support: reference *(*(cells+56)+(jj*params.nx+ii-params.nx-1)*4) has unaligned access   [ d2q9-bgk.c(448,15) ]
      remark #15389: vectorization support: reference *(*(cells+16)+(jj*params.nx+ii-params.nx-1)*4) has unaligned access   [ d2q9-bgk.c(452,14) ]
      remark #15389: vectorization support: reference *(*(cells+40)+(jj*params.nx+ii-params.nx-1)*4) has unaligned access   [ d2q9-bgk.c(452,46) ]
      remark #15389: vectorization support: reference *(*(cells+48)+(jj*params.nx+ii-params.nx-1)*4) has unaligned access   [ d2q9-bgk.c(453,14) ]
      remark #15389: vectorization support: reference *(*(cells+32)+(jj*params.nx+ii-params.nx-1)*4) has unaligned access   [ d2q9-bgk.c(454,15) ]
      remark #15389: vectorization support: reference *(*(cells+56)+(jj*params.nx+ii-params.nx-1)*4) has unaligned access   [ d2q9-bgk.c(454,47) ]
      remark #15389: vectorization support: reference *(*(cells+64)+(jj*params.nx+ii-params.nx-1)*4) has unaligned access   [ d2q9-bgk.c(455,15) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.529
      remark #15301: OUTER LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15456: masked unaligned unit stride loads: 13 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 138 
      remark #15477: vector cost: 23.870 
      remark #15478: estimated potential speedup: 5.360 
      remark #15486: divides: 2 
      remark #15488: --- end vector cost summary ---

      LOOP BEGIN at d2q9-bgk.c(439,9) inlined into d2q9-bgk.c(186,10)
         remark #15389: vectorization support: reference *(cells+(kk-1)*8) has unaligned access   [ d2q9-bgk.c(440,28) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15328: vectorization support: indirect load was emulated for the variable <*(*(cells+(kk-1)*8)+(jj*params.nx+ii-params.nx-1)*4)>, 64-bit indexed, part of address is read from memory   [ d2q9-bgk.c(440,28) ]
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.163
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15462: unmasked indexed (or gather) loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 10 
         remark #15477: vector cost: 13.000 
         remark #15478: estimated potential speedup: 0.680 
         remark #15488: --- end vector cost summary ---
      LOOP END
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(433,5) inlined into d2q9-bgk.c(186,10)
   <Remainder loop for vectorization>

      LOOP BEGIN at d2q9-bgk.c(439,9) inlined into d2q9-bgk.c(186,10)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(642,3) inlined into d2q9-bgk.c(192,3)
   remark #15382: vectorization support: call to function _mm_free(void *) cannot be vectorized   [ d2q9-bgk.c(643,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between *(cells+kk*8) (643:5) and *(cells+kk*8) (644:7)
   remark #15346: vector dependence: assumed FLOW dependence between *(cells+kk*8) (644:7) and *(cells+kk*8) (643:5)
   remark #25436: completely unrolled by 9  
LOOP END

LOOP BEGIN at d2q9-bgk.c(649,3) inlined into d2q9-bgk.c(192,3)
   remark #15382: vectorization support: call to function _mm_free(void *) cannot be vectorized   [ d2q9-bgk.c(650,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between *(tmp_cells+kk*8) (650:5) and *(tmp_cells+kk*8) (651:7)
   remark #15346: vector dependence: assumed FLOW dependence between *(tmp_cells+kk*8) (651:7) and *(tmp_cells+kk*8) (650:5)
   remark #25436: completely unrolled by 9  
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(159,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
d2q9-bgk.c(160,19):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(186,10):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
d2q9-bgk.c(191,3):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(124,34):remark #34051: REGISTER ALLOCATION : [main] d2q9-bgk.c:124

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     387
            Global    :      76
            Local     :     311
        Regenerable   :      62
        Spilled       :      16
        
    Routine stack
        Variables     :     108 bytes*
            Reads     :      57 [8.26e+01 ~ 1.8%]
            Writes    :      15 [2.10e+01 ~ 0.5%]
        Spills        :      88 bytes*
            Reads     :      18 [4.54e+01 ~ 1.0%]
            Writes    :      13 [1.93e+01 ~ 0.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: timestep(const t_param, float *__restrict__ *__restrict__, float **, const int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (timestep(const t_param, float *__restrict__ *__restrict__, float **, const int *)) [2/11=18.2%] d2q9-bgk.c(198,57)


    Report from: OpenMP optimizations [openmp]

d2q9-bgk.c(232:1-232:1):OMP:timestep:  OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(232,1)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ d2q9-bgk.c(388,11) ]
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(355,9)
      remark #15389: vectorization support: reference d_equ[_2+5] has unaligned access
      remark #15389: vectorization support: reference u[_2+5] has unaligned access   [ d2q9-bgk.c(356,27) ]
      remark #15389: vectorization support: reference u[_2+5] has unaligned access   [ d2q9-bgk.c(356,42) ]
      remark #15389: vectorization support: reference u[_2+5] has unaligned access   [ d2q9-bgk.c(356,49) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15427: loop was completely unrolled
      remark #15309: vectorization support: normalized vectorization overhead 0.909
      remark #15301: MATERIALIZED LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 3 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 23 
      remark #15477: vector cost: 5.500 
      remark #15478: estimated potential speedup: 2.190 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(198,57):remark #34051: REGISTER ALLOCATION : [timestep] d2q9-bgk.c:198

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     391
            Global    :      68
            Local     :     323
        Regenerable   :      98
        Spilled       :      35
        
    Routine stack
        Variables     :     196 bytes*
            Reads     :      15 [7.29e+01 ~ 1.4%]
            Writes    :      36 [2.44e+02 ~ 4.7%]
        Spills        :     320 bytes*
            Reads     :      71 [8.97e+02 ~ 17.2%]
            Writes    :      51 [4.65e+02 ~ 8.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: write_values(const t_param, float **, int *, float *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (write_values(const t_param, float **, int *, float *)) [3/11=27.3%] d2q9-bgk.c(687,34)
  -> EXTERN: (696,8) fopen(const char *__restrict__, const char *__restrict__)
  -> INLINE: (699,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (759,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (760,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (761,3) fflush(FILE *)
    -> EXTERN: (762,3) exit(int)
  -> EXTERN: (736,7) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (741,3) fclose(FILE *)
  -> EXTERN: (743,8) fopen(const char *__restrict__, const char *__restrict__)
  -> INLINE: (746,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (759,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (760,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (761,3) fflush(FILE *)
    -> EXTERN: (762,3) exit(int)
  -> EXTERN: (750,5) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (753,3) fclose(FILE *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(702,3)
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(736,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between cells[kk][ii+jj*params.nx] (714:11) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (736:7)
   remark #15346: vector dependence: assumed FLOW dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (736:7) and cells[kk][ii+jj*params.nx] (714:11)

   LOOP BEGIN at d2q9-bgk.c(703,5)
      remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(736,7) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between cells[kk][ii+jj*params.nx] (714:11) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (736:7)
      remark #15346: vector dependence: assumed FLOW dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (736:7) and cells[kk][ii+jj*params.nx] (714:11)

      LOOP BEGIN at d2q9-bgk.c(713,9)
         remark #25436: completely unrolled by 9   (pre-vector) 
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(749,3)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(750,5) ]
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(687,34):remark #34051: REGISTER ALLOCATION : [write_values] d2q9-bgk.c:687

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   31[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     154
            Global    :      37
            Local     :     117
        Regenerable   :      46
        Spilled       :      11
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :       7 [4.92e+01 ~ 3.6%]
            Writes    :       6 [1.26e+01 ~ 0.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: accelerate_flow(const t_param, float *__restrict__ *__restrict__, const int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (accelerate_flow(const t_param, float *__restrict__ *__restrict__, const int *)) [4/11=36.4%] d2q9-bgk.c(397,51)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(405,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between cells[1*2][ii+jj*params.nx] (413:7) and cells[7*2][ii+jj*params.nx] (419:7)
   remark #15346: vector dependence: assumed OUTPUT dependence between cells[7*2][ii+jj*params.nx] (419:7) and cells[1*2][ii+jj*params.nx] (413:7)
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(397,51):remark #34051: REGISTER ALLOCATION : [accelerate_flow] d2q9-bgk.c:397

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   21[ rax rdx rcx rsi rdi r8-r11 zmm0-zmm11]
        
    Routine temporaries
        Total         :      52
            Global    :      20
            Local     :      32
        Regenerable   :       5
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: av_velocity(const t_param, float **, int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (av_velocity(const t_param, float **, int *)) [5/11=45.5%] d2q9-bgk.c(424,72)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(432,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(433,5)
      remark #15389: vectorization support: reference *(*(cells+(kk-1)*8)+(jj*params.nx+ii-params.nx-1)*4) has unaligned access   [ d2q9-bgk.c(440,28) ]
      remark #15389: vectorization support: reference *(*(cells+8)+(jj*params.nx+ii-params.nx-1)*4) has unaligned access   [ d2q9-bgk.c(445,14) ]
      remark #15389: vectorization support: reference *(*(cells+40)+(jj*params.nx+ii-params.nx-1)*4) has unaligned access   [ d2q9-bgk.c(445,46) ]
      remark #15389: vectorization support: reference *(*(cells+64)+(jj*params.nx+ii-params.nx-1)*4) has unaligned access   [ d2q9-bgk.c(446,14) ]
      remark #15389: vectorization support: reference *(*(cells+24)+(jj*params.nx+ii-params.nx-1)*4) has unaligned access   [ d2q9-bgk.c(447,15) ]
      remark #15389: vectorization support: reference *(*(cells+48)+(jj*params.nx+ii-params.nx-1)*4) has unaligned access   [ d2q9-bgk.c(447,47) ]
      remark #15389: vectorization support: reference *(*(cells+56)+(jj*params.nx+ii-params.nx-1)*4) has unaligned access   [ d2q9-bgk.c(448,15) ]
      remark #15389: vectorization support: reference *(*(cells+16)+(jj*params.nx+ii-params.nx-1)*4) has unaligned access   [ d2q9-bgk.c(452,14) ]
      remark #15389: vectorization support: reference *(*(cells+40)+(jj*params.nx+ii-params.nx-1)*4) has unaligned access   [ d2q9-bgk.c(452,46) ]
      remark #15389: vectorization support: reference *(*(cells+48)+(jj*params.nx+ii-params.nx-1)*4) has unaligned access   [ d2q9-bgk.c(453,14) ]
      remark #15389: vectorization support: reference *(*(cells+32)+(jj*params.nx+ii-params.nx-1)*4) has unaligned access   [ d2q9-bgk.c(454,15) ]
      remark #15389: vectorization support: reference *(*(cells+56)+(jj*params.nx+ii-params.nx-1)*4) has unaligned access   [ d2q9-bgk.c(454,47) ]
      remark #15389: vectorization support: reference *(*(cells+64)+(jj*params.nx+ii-params.nx-1)*4) has unaligned access   [ d2q9-bgk.c(455,15) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.529
      remark #15301: OUTER LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15456: masked unaligned unit stride loads: 13 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 138 
      remark #15477: vector cost: 23.870 
      remark #15478: estimated potential speedup: 5.360 
      remark #15486: divides: 2 
      remark #15488: --- end vector cost summary ---

      LOOP BEGIN at d2q9-bgk.c(439,9)
         remark #15389: vectorization support: reference *(cells+(kk-1)*8) has unaligned access   [ d2q9-bgk.c(440,28) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15328: vectorization support: indirect load was emulated for the variable <*(*(cells+(kk-1)*8)+(jj*params.nx+ii-params.nx-1)*4)>, 64-bit indexed, part of address is read from memory   [ d2q9-bgk.c(440,28) ]
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.163
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15462: unmasked indexed (or gather) loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 10 
         remark #15477: vector cost: 13.000 
         remark #15478: estimated potential speedup: 0.680 
         remark #15488: --- end vector cost summary ---
      LOOP END
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(433,5)
   <Remainder loop for vectorization>

      LOOP BEGIN at d2q9-bgk.c(439,9)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(424,72):remark #34051: REGISTER ALLOCATION : [av_velocity] d2q9-bgk.c:424

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     168
            Global    :      40
            Local     :     128
        Regenerable   :      12
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      56 bytes*
            Reads     :       7 [1.35e+01 ~ 0.3%]
            Writes    :       7 [4.50e+00 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: finalise(const t_param *, float ***, float ***, int **, float **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (finalise(const t_param *, float ***, float ***, int **, float **)) [6/11=54.5%] d2q9-bgk.c(638,56)
  -> EXTERN: (643,5) _mm_free(void *)
  -> EXTERN: (646,3) free(void *)
  -> EXTERN: (650,5) _mm_free(void *)
  -> EXTERN: (653,3) free(void *)
  -> EXTERN: (656,3) free(void *)
  -> EXTERN: (659,3) free(void *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(642,3)
   remark #15382: vectorization support: call to function _mm_free(void *) cannot be vectorized   [ d2q9-bgk.c(643,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:_mm_free(void *) (643:5) and *(*cells_ptr+kk*8) (644:7)
   remark #15346: vector dependence: assumed OUTPUT dependence between *(*cells_ptr+kk*8) (644:7) and call:_mm_free(void *) (643:5)
   remark #25436: completely unrolled by 9  
LOOP END

LOOP BEGIN at d2q9-bgk.c(649,3)
   remark #15382: vectorization support: call to function _mm_free(void *) cannot be vectorized   [ d2q9-bgk.c(650,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:_mm_free(void *) (650:5) and *(*tmp_cells_ptr+kk*8) (651:7)
   remark #15346: vector dependence: assumed OUTPUT dependence between *(*tmp_cells_ptr+kk*8) (651:7) and call:_mm_free(void *) (650:5)
   remark #25436: completely unrolled by 9  
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(638,56):remark #34051: REGISTER ALLOCATION : [finalise] d2q9-bgk.c:638

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rbx rsi rdi r8 r13-r15]
        
    Routine temporaries
        Total         :      78
            Global    :      10
            Local     :      68
        Regenerable   :       1
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: calc_reynolds(const t_param, float **, int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (calc_reynolds(const t_param, float **, int *)) [7/11=63.6%] d2q9-bgk.c(665,74)
  -> INLINE: (668,10) av_velocity(const t_param, float **, int *) (isz = 167) (sz = 178)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(432,3) inlined into d2q9-bgk.c(668,10)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(433,5) inlined into d2q9-bgk.c(668,10)
      remark #15389: vectorization support: reference *(*(cells+(kk-1)*8)+(jj*params.nx+ii-params.nx-1)*4) has unaligned access   [ d2q9-bgk.c(440,28) ]
      remark #15389: vectorization support: reference *(*(cells+8)+(jj*params.nx+ii-params.nx-1)*4) has unaligned access   [ d2q9-bgk.c(445,14) ]
      remark #15389: vectorization support: reference *(*(cells+40)+(jj*params.nx+ii-params.nx-1)*4) has unaligned access   [ d2q9-bgk.c(445,46) ]
      remark #15389: vectorization support: reference *(*(cells+64)+(jj*params.nx+ii-params.nx-1)*4) has unaligned access   [ d2q9-bgk.c(446,14) ]
      remark #15389: vectorization support: reference *(*(cells+24)+(jj*params.nx+ii-params.nx-1)*4) has unaligned access   [ d2q9-bgk.c(447,15) ]
      remark #15389: vectorization support: reference *(*(cells+48)+(jj*params.nx+ii-params.nx-1)*4) has unaligned access   [ d2q9-bgk.c(447,47) ]
      remark #15389: vectorization support: reference *(*(cells+56)+(jj*params.nx+ii-params.nx-1)*4) has unaligned access   [ d2q9-bgk.c(448,15) ]
      remark #15389: vectorization support: reference *(*(cells+16)+(jj*params.nx+ii-params.nx-1)*4) has unaligned access   [ d2q9-bgk.c(452,14) ]
      remark #15389: vectorization support: reference *(*(cells+40)+(jj*params.nx+ii-params.nx-1)*4) has unaligned access   [ d2q9-bgk.c(452,46) ]
      remark #15389: vectorization support: reference *(*(cells+48)+(jj*params.nx+ii-params.nx-1)*4) has unaligned access   [ d2q9-bgk.c(453,14) ]
      remark #15389: vectorization support: reference *(*(cells+32)+(jj*params.nx+ii-params.nx-1)*4) has unaligned access   [ d2q9-bgk.c(454,15) ]
      remark #15389: vectorization support: reference *(*(cells+56)+(jj*params.nx+ii-params.nx-1)*4) has unaligned access   [ d2q9-bgk.c(454,47) ]
      remark #15389: vectorization support: reference *(*(cells+64)+(jj*params.nx+ii-params.nx-1)*4) has unaligned access   [ d2q9-bgk.c(455,15) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.529
      remark #15301: OUTER LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15456: masked unaligned unit stride loads: 13 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 138 
      remark #15477: vector cost: 23.870 
      remark #15478: estimated potential speedup: 5.360 
      remark #15486: divides: 2 
      remark #15488: --- end vector cost summary ---

      LOOP BEGIN at d2q9-bgk.c(439,9) inlined into d2q9-bgk.c(668,10)
         remark #15389: vectorization support: reference *(cells+(kk-1)*8) has unaligned access   [ d2q9-bgk.c(440,28) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15328: vectorization support: indirect load was emulated for the variable <*(*(cells+(kk-1)*8)+(jj*params.nx+ii-params.nx-1)*4)>, 64-bit indexed, part of address is read from memory   [ d2q9-bgk.c(440,28) ]
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.163
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15462: unmasked indexed (or gather) loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 10 
         remark #15477: vector cost: 13.000 
         remark #15478: estimated potential speedup: 0.680 
         remark #15488: --- end vector cost summary ---
      LOOP END
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(433,5) inlined into d2q9-bgk.c(668,10)
   <Remainder loop for vectorization>

      LOOP BEGIN at d2q9-bgk.c(439,9) inlined into d2q9-bgk.c(668,10)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(665,74):remark #34051: REGISTER ALLOCATION : [calc_reynolds] d2q9-bgk.c:665

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     174
            Global    :      41
            Local     :     133
        Regenerable   :      13
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      56 bytes*
            Reads     :       7 [1.35e+01 ~ 0.3%]
            Writes    :       7 [4.50e+00 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: total_density(const t_param, t_speed *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (total_density(const t_param, t_speed *)) [8/11=72.7%] d2q9-bgk.c(672,59)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(675,3)
   remark #25101: Loop Interchange not done due to: Original Order seems proper
   remark #25452: Original Order found to be proper, but by a close margin
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(676,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at d2q9-bgk.c(677,7)
         remark #15389: vectorization support: reference cells->speeds[ii+jj*params.nx][kk] has unaligned access   [ d2q9-bgk.c(678,18) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.500
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 0.750 
         remark #15478: estimated potential speedup: 3.210 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(677,7)
      <Remainder loop for vectorization>
         remark #25436: completely unrolled by 1  
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(672,59):remark #34051: REGISTER ALLOCATION : [total_density] d2q9-bgk.c:672

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rsi rdi r8-r11 zmm0-zmm7]
        
    Routine temporaries
        Total         :      31
            Global    :      18
            Local     :      13
        Regenerable   :       3
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: die(const char *, const int, const char *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (die(const char *, const int, const char *)) [9/11=81.8%] d2q9-bgk.c(758,65)
  -> EXTERN: (759,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (760,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (761,3) fflush(FILE *)
  -> EXTERN: (762,3) exit(int)


    Report from: Code generation optimizations [cg]

d2q9-bgk.c(758,65):remark #34051: REGISTER ALLOCATION : [die] d2q9-bgk.c:758

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rbx rsi rdi]
        
    Routine temporaries
        Total         :      28
            Global    :       1
            Local     :      27
        Regenerable   :       9
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: usage(const char *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (usage(const char *)) [10/11=90.9%] d2q9-bgk.c(765,29)
  -> EXTERN: (766,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (767,3) exit(int)


    Report from: Code generation optimizations [cg]

d2q9-bgk.c(765,29):remark #34051: REGISTER ALLOCATION : [usage] d2q9-bgk.c:765

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rdx rsi rdi]
        
    Routine temporaries
        Total         :      15
            Global    :       0
            Local     :      15
        Regenerable   :       4
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: initialise(const char *, const char *, t_param *, float ***, float ***, int **, float **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (initialise(const char *, const char *, t_param *, float ***, float ***, int **, float **)) [11/11=100.0%] d2q9-bgk.c(470,37)
  -> EXTERN: (478,8) fopen(const char *__restrict__, const char *__restrict__)
  -> EXTERN: (481,5) sprintf(char *__restrict__, const char *__restrict__, ...)
  -> INLINE: (482,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (759,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (760,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (761,3) fflush(FILE *)
    -> EXTERN: (762,3) exit(int)
  -> EXTERN: (486,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (489,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (759,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (760,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (761,3) fflush(FILE *)
    -> EXTERN: (762,3) exit(int)
  -> EXTERN: (491,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (494,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (759,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (760,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (761,3) fflush(FILE *)
    -> EXTERN: (762,3) exit(int)
  -> EXTERN: (496,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (499,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (759,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (760,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (761,3) fflush(FILE *)
    -> EXTERN: (762,3) exit(int)
  -> EXTERN: (501,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (504,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (759,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (760,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (761,3) fflush(FILE *)
    -> EXTERN: (762,3) exit(int)
  -> EXTERN: (506,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (509,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (759,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (760,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (761,3) fflush(FILE *)
    -> EXTERN: (762,3) exit(int)
  -> EXTERN: (511,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (514,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (759,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (760,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (761,3) fflush(FILE *)
    -> EXTERN: (762,3) exit(int)
  -> EXTERN: (516,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (519,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (759,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (760,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (761,3) fflush(FILE *)
    -> EXTERN: (762,3) exit(int)
  -> EXTERN: (522,3) fclose(FILE *)
  -> EXTERN: (544,26) malloc(size_t)
  -> EXTERN: (547,18) _mm_malloc(unsigned long long, unsigned long long)
  -> INLINE: (551,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (759,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (760,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (761,3) fflush(FILE *)
    -> EXTERN: (762,3) exit(int)
  -> EXTERN: (554,30) malloc(size_t)
  -> EXTERN: (557,18) _mm_malloc(unsigned long long, unsigned long long)
  -> INLINE: (561,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (759,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (760,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (761,3) fflush(FILE *)
    -> EXTERN: (762,3) exit(int)
  -> EXTERN: (564,20) malloc(size_t)
  -> INLINE: (567,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (759,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (760,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (761,3) fflush(FILE *)
    -> EXTERN: (762,3) exit(int)
  -> EXTERN: (599,8) fopen(const char *__restrict__, const char *__restrict__)
  -> EXTERN: (602,5) sprintf(char *__restrict__, const char *__restrict__, ...)
  -> INLINE: (603,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (759,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (760,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (761,3) fflush(FILE *)
    -> EXTERN: (762,3) exit(int)
  -> EXTERN: (607,20) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (607,20) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (610,7) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (759,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (760,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (761,3) fflush(FILE *)
    -> EXTERN: (762,3) exit(int)
  -> INLINE: (613,7) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (759,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (760,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (761,3) fflush(FILE *)
    -> EXTERN: (762,3) exit(int)
  -> INLINE: (616,7) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (759,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (760,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (761,3) fflush(FILE *)
    -> EXTERN: (762,3) exit(int)
  -> INLINE: (619,7) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (759,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (760,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (761,3) fflush(FILE *)
    -> EXTERN: (762,3) exit(int)
  -> EXTERN: (626,3) fclose(FILE *)
  -> EXTERN: (632,27) malloc(size_t)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(545,3)
   remark #15382: vectorization support: call to function _mm_malloc(unsigned long long, unsigned long long) cannot be vectorized   [ d2q9-bgk.c(547,18) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:_mm_malloc(unsigned long long, unsigned long long) (547:18) and *(*cells_ptr+kk*8) (546:7)
   remark #15346: vector dependence: assumed OUTPUT dependence between *(*cells_ptr+kk*8) (546:7) and call:_mm_malloc(unsigned long long, unsigned long long) (547:18)
   remark #25436: completely unrolled by 9  
LOOP END

LOOP BEGIN at d2q9-bgk.c(555,3)
   remark #15382: vectorization support: call to function _mm_malloc(unsigned long long, unsigned long long) cannot be vectorized   [ d2q9-bgk.c(557,18) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:_mm_malloc(unsigned long long, unsigned long long) (557:18) and *(*tmp_cells_ptr+kk*8) (556:7)
   remark #15346: vector dependence: assumed OUTPUT dependence between *(*tmp_cells_ptr+kk*8) (556:7) and call:_mm_malloc(unsigned long long, unsigned long long) (557:18)
   remark #25436: completely unrolled by 9  
LOOP END

LOOP BEGIN at d2q9-bgk.c(574,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between **cells_ptr[ii+jj*params->nx] (577:9) and *cells_ptr[8*2][ii+jj*params->nx] (587:9)
   remark #15346: vector dependence: assumed OUTPUT dependence between *cells_ptr[8*2][ii+jj*params->nx] (587:9) and **cells_ptr[ii+jj*params->nx] (577:9)

   LOOP BEGIN at d2q9-bgk.c(575,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between **cells_ptr[ii+jj*params->nx] (577:9) and *cells_ptr[8*2][ii+jj*params->nx] (587:9)
      remark #15346: vector dependence: assumed OUTPUT dependence between *cells_ptr[8*2][ii+jj*params->nx] (587:9) and **cells_ptr[ii+jj*params->nx] (577:9)
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(592,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(593,5)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at d2q9-bgk.c(593,5)
         remark #15389: vectorization support: reference obstacles_ptr has unaligned access   [ d2q9-bgk.c(594,9) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.600
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 3 
         remark #15477: vector cost: 0.620 
         remark #15478: estimated potential speedup: 4.000 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(593,5)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=24
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(607,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(594,9):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
d2q9-bgk.c(594,9):remark #34026: call to memset implemented as a call to optimized library version
d2q9-bgk.c(470,37):remark #34051: REGISTER ALLOCATION : [initialise] d2q9-bgk.c:470

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm2]
        
    Routine temporaries
        Total         :     628
            Global    :     115
            Local     :     513
        Regenerable   :     259
        Spilled       :      15
        
    Routine stack
        Variables     :    1036 bytes*
            Reads     :       3 [1.63e+01 ~ 1.1%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      80 bytes*
            Reads     :      18 [4.14e+01 ~ 2.8%]
            Writes    :      12 [7.40e+00 ~ 0.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The function is larger than the inliner would normally inline.  Use the
    option -inline-max-size to increase the size of any function that would
    normally be inlined, add "inline __attribute__((always_inline))" to the
    declaration of the called function, or add "#pragma forceinline" before
    the call site.

